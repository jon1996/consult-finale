"""
Django settings for consult project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
try:
    import environ  # django-environ
    _env = environ.Env()
    _env_file = os.path.join(Path(__file__).resolve().parent.parent, '.env')
    if os.path.exists(_env_file):
        environ.Env.read_env(_env_file)
except Exception:
    # Safe fallback if django-environ isn't available or .env missing
    pass

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# In development you may leave the default; in production set DJANGO_SECRET_KEY in the environment.
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'dev-insecure-key-change-me')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DJANGO_DEBUG', 'True').lower() in ['1', 'true', 'yes']

ALLOWED_HOSTS = [h.strip() for h in os.environ.get('DJANGO_ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',') if h.strip()]

# CSRF trusted origins (comma-separated), e.g. "https://example.com,https://www.example.com,https://YOUR_IP"
CSRF_TRUSTED_ORIGINS = [o.strip() for o in os.environ.get('DJANGO_CSRF_TRUSTED_ORIGINS', '').split(',') if o.strip()]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'accounts',
    'dashboard',
    'core',
]

# Utilisateur custom
AUTH_USER_MODEL = 'accounts.User'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'accounts.middleware.InactiveUserLogoutMiddleware',
]

ROOT_URLCONF = 'consult.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.template.context_processors.i18n',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'consult.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

# Default language (can be overridden via i18n set_language view)
LANGUAGE_CODE = os.environ.get('DJANGO_LANGUAGE_CODE', 'fr')

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Internationalization
# Supported languages: French, English, Chinese (Simplified). For Cantonese, use zh-hant (Traditional) if needed.
LANGUAGES = [
    ('fr', 'Français'),
    ('en', 'English'),
    ('zh-hans', '中文(简体)'),
]
LOCALE_PATHS = [os.path.join(BASE_DIR, 'locale')]

# Email configuration
# Default: console in DEBUG; SMTP in production. Can be overridden via EMAIL_BACKEND env var.
EMAIL_BACKEND = os.environ.get('EMAIL_BACKEND')
if not EMAIL_BACKEND:
    if DEBUG:
        EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    else:
        EMAIL_BACKEND = os.environ.get('DJANGO_EMAIL_BACKEND', 'django.core.mail.backends.smtp.EmailBackend')

EMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.example.com')
EMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', 'user@example.com')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', 'password')
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True').lower() in ['1', 'true', 'yes']
EMAIL_USE_SSL = os.environ.get('EMAIL_USE_SSL', 'False').lower() in ['1', 'true', 'yes']
EMAIL_TIMEOUT = int(os.environ.get('EMAIL_TIMEOUT', 10))
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'Consult <noreply@example.com>')
SERVER_EMAIL = os.environ.get('SERVER_EMAIL', DEFAULT_FROM_EMAIL)

# Static & Media
STATIC_URL = '/static/'
MEDIA_URL = '/media/'
STATIC_ROOT = os.environ.get('DJANGO_STATIC_ROOT', os.path.join(BASE_DIR, 'staticfiles'))
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Security
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Internal secret used by server-side callers to change language via the secure endpoint.
# In production, set INTERNAL_SETLANG_KEY in the environment to a strong random value.
INTERNAL_SETLANG_KEY = os.environ.get('INTERNAL_SETLANG_KEY', 'dev-internal-setlang-key')

# Auth redirects
LOGIN_URL = '/app/accounts/login/'
LOGIN_REDIRECT_URL = '/app/space/'

# Session inactivity auto-logout
# 10 minutes of inactivity
SESSION_IDLE_TIMEOUT = int(os.environ.get('DJANGO_SESSION_IDLE_TIMEOUT', 600))
# Ensure the session cookie max age is at least timeout (optional longer to allow sliding behavior)
SESSION_COOKIE_AGE = int(os.environ.get('DJANGO_SESSION_COOKIE_AGE', 60 * 60 * 8))  # 8 hours
# Update the session on each request so last_activity_ts persists; prevents premature expiry
SESSION_SAVE_EVERY_REQUEST = True

# CinetPay configuration (use environment variables in production)
CINETPAY_API_BASE = os.environ.get('CINETPAY_API_BASE', 'https://api-checkout.cinetpay.com')
CINETPAY_SITE_ID = os.environ.get('CINETPAY_SITE_ID', '')
CINETPAY_API_KEY = os.environ.get('CINETPAY_API_KEY', '')
CINETPAY_VERIFY_ENDPOINT = os.environ.get('CINETPAY_VERIFY_ENDPOINT', f"{CINETPAY_API_BASE}/v2/payment/check")
CINETPAY_SECRET_KEY = os.environ.get('CINETPAY_SECRET_KEY', '')
# Preferred transaction currency for your account (e.g., CDF, USD, XOF)
# Default to USD everywhere unless overridden via environment
CINETPAY_CURRENCY = os.environ.get('CINETPAY_CURRENCY', 'XOF')

# Business defaults (testing only)
# Default prices per request kind when no admin offer (price) is set.
# WARNING: These are for local testing/sandbox only. Remove or override in production.
DEFAULT_PRICES = {
    'tdg': 100.00,
}

# Feature flag: control whether the application sends the user-facing payment emails
# Set to 'False' in the environment to disable sending payment link emails after
# submission/validation (useful for testing or when another system handles notifications).
SEND_PAYMENT_EMAILS = os.environ.get('SEND_PAYMENT_EMAILS', 'False').lower() in ['1', 'true', 'yes']
